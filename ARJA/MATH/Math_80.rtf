{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs29\fsmilli14667 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 -	for (int i=0; i < j; i+=4) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 for (int k=0; k < 4; k+=step) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 final double tmp=work[i + k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 work[i + k]=work[j - k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 work[j - k]=tmp;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \}
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 j-=4;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\}\'a0
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	tau=0.0;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 ,
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	for (int i=0; i < j; i+=4) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 for (int k=0; k < 4; k+=step) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 final double tmp=work[i + k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 work[i + k]=work[j - k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 work[j - k]=tmp;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \}
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 j-=4;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\}\'a0
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	pingPong=1 - pingPong;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 ,
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	for (int i=0; i < j; i+=4) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 for (int k=0; k < 4; k+=step) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 final double tmp=work[i + k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 work[i + k]=work[j - k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 work[j - k]=tmp;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \}
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 j-=4;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\}\'a0
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	cachedD=MatrixUtils.createRealDiagonalMatrix(realEigenvalues);
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 ,
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	work[i + k]=work[j - k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	work[j - k]=tmp;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 ,
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	work[i + k]=work[j - k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	if (tType == -18) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	\'a0 g=0.25 * 0.333;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	\}
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	 else \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	\'a0 g=0.25;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	\}
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 ,
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	for (int i=0; i < j; i+=4) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 for (int k=0; k < 4; k+=step) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 final double tmp=work[i + k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 work[i + k]=work[j - k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 work[j - k]=tmp;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \}
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 j-=4;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\}\'a0
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	g+=0.333 * (1 - g);
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 ,
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	for (int i=0; i < j; i+=4) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 for (int k=0; k < 4; k+=step) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 final double tmp=work[i + k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 work[i + k]=work[j - k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 work[j - k]=tmp;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \}
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 j-=4;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\}\'a0
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	dMin2=0;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 ,
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	work[i + k]=work[j - k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	squaredSecondary[i]=0;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 ,
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	for (int i=0; i < j; i+=4) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 for (int k=0; k < 4; k+=step) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 final double tmp=work[i + k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 work[i + k]=work[j - k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \'a0 work[j - k]=tmp;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 \}
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\'a0 j-=4;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	\}\'a0
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 \'a0
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	for (int i=0; i < realEigenvalues.length; ++i) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	\'a0 if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) \{
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	\'a0 \'a0 return false;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	\'a0 \}
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	\}
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 ,
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	work[j - k]=tmp;
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 ,
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 -	work[i + k]=work[j - k];
\f1\fs24 \strokec2 \

\f0\fs29\fsmilli14667 \strokec2 +	dMin=Math.min(dMin,dN1);
\f1\fs24 \strokec2 \
\
}