-	if (a2 < cnst1) {
-	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
 
+	tType=-3;
,
-	if (a2 < cnst1) {
-	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
+	tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
,
-	b2=work[nn - 13] / work[nn - 15];
+	tType=-3;
,
-	if (a2 < cnst1) {
-	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
+	if (work[nn - 5] > work[nn - 7]) {
+	  return;
+	}
,
-	if (a2 < cnst1) {
-	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
+	g=0.25 * 0.333;
,
-	if (a2 < cnst1) {
-	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}

+	if (tType == -18) {
+	  g=0.25 * 0.333;
+	}
+	 else {
+	  g=0.25;
+	}
,
-	if (a2 < cnst1) {
-	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
+	dMin1=-work[4 * start + pingPong];
,
-	b2=work[nn - 13] / work[nn - 15];
+	tau=Math.max(s,0.333 * dMin);
,
-	if (a2 < cnst1) {
-	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
+	tau=0.25 * dMin1;
,
-	b2=work[nn - 13] / work[nn - 15];
+	dMin=Math.min(dMin,dN);
,
-	b2=work[nn - 13] / work[nn - 15];
+	tau=Math.max(s,a2 * (1 - cnst2 * b2));
,
-	if (a2 < cnst1) {
-	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
+	eMin=work[4 * start + pingPong + 4];
,
-	if (a2 < cnst1) {
-	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
+	if (100 * b1 < b2) {
+	  break;
+	}