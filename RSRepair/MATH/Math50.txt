-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	final double min=getMin();
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),atol)) {
+	switch (allowed) {
+	case ANY_SIDE:
+	    return x1;
+	case LEFT_SIDE:
+	  return inverted ? x1 : x0;
+	case RIGHT_SIDE:
+	return inverted ? x0 : x1;
+	case BELOW_SIDE:
+	return (f1 <= 0) ? x1 : x0;
+	case ABOVE_SIDE:
+	return (f1 >= 0) ? x1 : x0;
+	default :
+	throw new MathInternalError();
+	}
+	}
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	if (!inverted) {
+	  return x1;
+	}
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	if (f0 == 0.0) {
+	  return x0;
+	}
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	int start=0;
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	final double max=getMax();
,
+	double y0=computeObjectiveValue(x0);
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	if (f1 >= 0) {
+	  return x1;
+	}
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	final double t=getAbsoluteAccuracy();
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	f0*=0.5;
,
-	if (x == x1) {
-  	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
-	  f0=computeObjectiveValue(x0);
-	}
+	return x;
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	double min=getMin();
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	if (fx == 0.0) {
+	  return x;
+	}
,
+	f0=computeObjectiveValue(x0);
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	int agingB=0;
,
+	final double y=computeObjectiveValue(x);
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	double max=getMax();
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	double y1=computeObjectiveValue(x1);
,
-	if (x == x1) {
-	  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
-	  f0=computeObjectiveValue(x0);
-	}
+	double x2=0.5 * (x0 + x1);
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	double x2=0.5 * (x0 + x1);
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	final double initial=getStartValue();
,
+	double y1=computeObjectiveValue(x1);
,
-	f0=computeObjectiveValue(x0);
+	f0=f1;
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	if (FastMath.abs(f1) <= ftol) {
+	switch (allowed) {
+	case ANY_SIDE:
+	    return x1;
+	case LEFT_SIDE:
+	  if (inverted) {
+	    return x1;
+	  }
+	break;
+	case RIGHT_SIDE:
+	if (!inverted) {
+	return x1;
+	}
+	break;
+	case BELOW_SIDE:
+	if (f1 <= 0) {
+	return x1;
+	}
+	break;
+	case ABOVE_SIDE:
+	if (f1 >= 0) {
+	return x1;
+	}
+	break;
+	default :
+	throw new MathInternalError();
+	}
+	}
,
-	if (x == x1) {
-	  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
-	  f0=computeObjectiveValue(x0);
-	}
+	int numIterations=0;
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	if (f1 == 0.0) {
+	  return x1;
+	}
,
-	if (x == x1) {
-	  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
-	  f0=computeObjectiveValue(x0);
-	}
+	if (FastMath.abs(f1) <= ftol) {
+	switch (allowed) {
+	case ANY_SIDE:
+	    return x1;
+	case LEFT_SIDE:
+	  if (inverted) {
+	    return x1;
+	  }
+	break;
+	case RIGHT_SIDE:
+	if (!inverted) {
+	return x1;
+	}
+	break;
+	case BELOW_SIDE:
+	if (f1 <= 0) {
+	return x1;
+	}
+	break;
+	case ABOVE_SIDE:
+	if (f1 >= 0) {
+	return x1;
+	}
+	break;
+	default :
+	throw new MathInternalError();
+	}
+	}
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	double initial=getStartValue();
,
+	incrementEvaluationCount();
,
-	if (x == x1) {
-	  x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
-	  f0=computeObjectiveValue(x0);
-	}
+	int agingA=0;
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	if (FastMath.abs(f1) <= ftol) {
+	  return x1;
+	}
,
-	f0=computeObjectiveValue(x0);
+	return doSolve();
,
-	x0=0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1),atol));
+	inverted=!inverted;
,
