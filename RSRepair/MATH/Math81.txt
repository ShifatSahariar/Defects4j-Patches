-	if (a2 < cnst1) {
-	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
+	OpenMapRealVector res=new OpenMapRealVector(this);
,
-	if (end - start > 2) {
-	 b2=work[nn - 13] / work[nn - 15];
-	a2=a2 + b2;
-	for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
-	  if (b2 == 0.0) {
-	    break;
-	  }
-	  b1=b2;
-	  if (work[i4] > work[i4 - 2]) {
-     return;
-	 }
-	  b2=b2 * (work[i4] / work[i4 - 2]);
-	  a2=a2 + b2;
-	  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
-	    break;
-	  }
-	}
-	a2=cnst3 * a2;
-	}
+	np=nn - 9;
,
-	if (a2 < cnst1) {
-	s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
+	sigmaLow=0;
,
-	if (a2 < cnst1) {
-	s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
+	double tmp=0;
,
-	b2=work[nn - 5] / work[nn - 7];
+	lowerSpectra=Double.POSITIVE_INFINITY;
,
+	if (b2 != 0.0) {
+	for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
+	  final double oldB1=b1;
+	  if (work[i4] > work[i4 - 2]) {
+	    return;
+	  }
+	  b1=b1 * (work[i4] / work[i4 - 2]);
+	  b2=b2 + b1;
+	  if (100 * Math.max(b1,oldB1) < b2) {
+	    break;
+	  }
+	}
+	}
,
-	if (end - start > 2) {
-	 b2=work[nn - 13] / work[nn - 15];
-	a2=a2 + b2;
-	for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
-	  if (b2 == 0.0) {
-	    break;
-	  }
-	  b1=b2;
-	  if (work[i4] > work[i4 - 2]) {
-     return;
-	 }
-	  b2=b2 * (work[i4] / work[i4 - 2]);
-	  a2=a2 + b2;
-	  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
-	    break;
-	  }
-	}
-	a2=cnst3 * a2;
-	}
+	final double gap2=dMin2 - a2 - dMin2 * 0.25;
,
-	if (end - start > 2) {
-	 b2=work[nn - 13] / work[nn - 15];
-	a2=a2 + b2;
-	for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
-	  if (b2 == 0.0) {
-	    break;
-	  }
-	  b1=b2;
-	  if (work[i4] > work[i4 - 2]) {
-     return;
-	 }
-	  b2=b2 * (work[i4] / work[i4 - 2]);
-	  a2=a2 + b2;
-	  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
-	    break;
-	  }
-	}
-	a2=cnst3 * a2;
-	}
+	if (tType < -22) {
+	  tau=0.0;
+	}
+	 else if (dMin1 > 0.0) {
+	  tau=(tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
+	  tType-=11;
+	}
+	 else {
+	  tau*=0.25;
+	  tType-=12;
+	}
,
-	b2=work[nn - 13] / work[nn - 15];
+	dMin=0.0;
,
-	
-	if (a2 < cnst1) {
-	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
+	for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
+	  if (b2 == 0.0) {
+	    break;
+	  }
+	  b1=b2;
+	  if (work[i4] > work[i4 - 2]) {
+	    return;
+	  }
+	  b2=b2 * (work[i4] / work[i4 - 2]);
+	  a2=a2 + b2;
+	  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
+	    break;
+	  }
+	}
,
-	a2=0.0;
,
-	a2=0.0;
+	tau=g * dMin;
,
-	b2=work[nn - 5] / work[nn - 7];
+	for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
+	  final double oldB1=b1;
+	  if (work[i4] > work[i4 - 2]) {
+	    return;
+	  }
+	  b1=b1 * (work[i4] / work[i4 - 2]);
+	  b2=b2 + b1;
+	  if (100 * Math.max(b1,oldB1) < b2) {
+	    break;
+	  }
+	}
,
-	b2=work[nn - 13] / work[nn - 15];
+	this.secondary=secondary.clone();
,
-	a2=0.0;
+	dMin1=-work[4 * start + pingPong];
,
-	b2=work[nn - 5] / work[nn - 7];
+	double eCurrent=0;
,
-	b2=work[nn - 13] / work[nn - 15];
+	for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
+	  if (work[i4] > work[i4 - 2]) {
+	    return;
+	  }
+	  b1*=work[i4] / work[i4 - 2];
+	  b2+=b1;
+	  if (100 * b1 < b2) {
+	    break;
+	  }
+	}
,
-	b2=work[nn - 5] / work[nn - 7];
+	break;
,
-	if (end - start > 2) {
-	 b2=work[nn - 13] / work[nn - 15];
-	a2=a2 + b2;
-	for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
-	  if (b2 == 0.0) {
-	    break;
-	  }
-	  b1=b2;
-	  if (work[i4] > work[i4 - 2]) {
-     return;
-	 }
-	  b2=b2 * (work[i4] / work[i4 - 2]);
-	  a2=a2 + b2;
-	  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
-	    break;
-	  }
-	}
-	a2=cnst3 * a2;
-	}
+	double absDCurrent=Math.abs(main[0]);
,
-	a2=0.0;
+	double res=0;
,
-	if (end - start > 2) {
-	 b2=work[nn - 13] / work[nn - 15];
-	a2=a2 + b2;
-	for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
-	  if (b2 == 0.0) {
-	    break;
-	  }
-	  b1=b2;
-	  if (work[i4] > work[i4 - 2]) {
-     return;
-	 }
-	  b2=b2 * (work[i4] / work[i4 - 2]);
-	  a2=a2 + b2;
-	  if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
-	    break;
-	  }
-	}
-	a2=cnst3 * a2;
-	}
+	transformer=null;
,
-	b2=work[nn - 13] / work[nn - 15];
+	b2+=b1;
,
-	a2=0.0;
+	double z=1;
,
-	b2=work[nn - 5] / work[nn - 7];
+	double n2=1;
,
-	b2=work[nn - 13] / work[nn - 15];
+	final StringBuffer res=new StringBuffer();
,
-	b2=work[nn - 13] / work[nn - 15];
+	double sum2=0;
,
-	b2=work[nn - 13] / work[nn - 15];
+	this.splitTolerance=splitTolerance;
,
-	if (end - start > 2) {
-	  b2=work[nn - 13] / work[nn - 15];
-	  a2=a2 + b2;
-	  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
-	    if (b2 == 0.0) {
-	      break;
-	    }
-	    b1=b2;
-	    if (work[i4] > work[i4 - 2]) {
-	      return;
-	    }
-	    b2=b2 * (work[i4] / work[i4 - 2]);
-	    a2=a2 + b2;
-	    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
-	      break;
-	    }
-	  }
-	  a2=cnst3 * a2;
-	}
+	tau=-dMin;
,
-	b2=work[nn - 13] / work[nn - 15];
+	cachedD=null;
,
-	if (a2 < cnst1) {
-	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
-	}
+	cachedV=null;
,
+	if (b2 != 0.0) {
+	  for (int i4=4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
+	    final double oldB1=b1;
+	    if (work[i4] > work[i4 - 2]) {
+	      return;
+	    }
+	    b1=b1 * (work[i4] / work[i4 - 2]);
+	    b2=b2 + b1;
+	    if (100 * Math.max(b1,oldB1) < b2) {
+	      break;
+	    }
+	  }
+	}
,
-	b2=work[nn - 5] / work[nn - 7];
+	imagEigenvalues=new double[main.length];
,
-	a2=0.0;
+	double d=work[4 * start + pingPong];
,
-	if (end - start > 2) {
-	  b2=work[nn - 13] / work[nn - 15];
-	  a2=a2 + b2;
-	  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
-	    if (b2 == 0.0) {
-	      break;
-	    }
-	    b1=b2;
-	    if (work[i4] > work[i4 - 2]) {
-	      return;
-	    }
-	    b2=b2 * (work[i4] / work[i4 - 2]);
-	    a2=a2 + b2;
-	    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
-	      break;
-	    }
-	  }
-	  a2=cnst3 * a2;
-	}
+	int h=3542;
,
-	b2=work[nn - 5] / work[nn - 7];
+	double invIJ=0;
,
-	b2=work[nn - 13] / work[nn - 15];
+	double z=1;
,
-	b2=work[nn - 5] / work[nn - 7];
+	int blockIndex=0;
,
+	for (int i4=4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4-=4) {
+	  if (work[i4] > work[i4 - 2]) {
+	    return;
+	  }
+	  b1*=work[i4] / work[i4 - 2];
+	  b2+=b1;
+	  if (100 * b1 < b2) {
+	    break;
+	  }
+	}
,
-	a2=0.0;
+	if (a2 < cnst1) {
+	  s=gam * (1 - Math.sqrt(a2)) / (1 + a2);
+	}
,
-	if (end - start > 2) {
-	  b2=work[nn - 13] / work[nn - 15];
-	  a2=a2 + b2;
-	  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
-	    if (b2 == 0.0) {
-	      break;
-	    }
-	    b1=b2;
-	    if (work[i4] > work[i4 - 2]) {
-	      return;
-	    }
-	    b2=b2 * (work[i4] / work[i4 - 2]);
-	    a2=a2 + b2;
-	    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
-	      break;
-	    }
-	  }
-	  a2=cnst3 * a2;
-	}
+	tau=0;
,
-	if (end - start > 2) {
-	  b2=work[nn - 13] / work[nn - 15];
-	  a2=a2 + b2;
-	  for (int i4=nn - 17; i4 >= 4 * start + 2 + pingPong; i4-=4) {
-	    if (b2 == 0.0) {
-	      break;
-	    }
-	    b1=b2;
-	    if (work[i4] > work[i4 - 2]) {
-	      return;
-	    }
-	    b2=b2 * (work[i4] / work[i4 - 2]);
-	    a2=a2 + b2;
-	    if (100 * Math.max(b2,b1) < a2 || cnst1 < a2) {
-	      break;
-	    }
-	  }
-	  a2=cnst3 * a2;
-	}
+	tau=0.5 * dMin1;
,

