-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Double.isNaN(entry) && !Double.isInfinite(entry) && Precision.compareTo(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry)))) > 0) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && Precision.compareTo(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry)))) > 0) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && Precision.compareTo(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry)))) > 0 && !Double.isNaN(entry) && !Double.isInfinite(entry)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, 10 * Precision.EPSILON)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && Precision.compareTo(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry)))) != 0) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0d && !Precision.equals(entry, 0d, maxUlps * Math.ulp(1d))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, maxUlps * Math.ulp(1.0))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry)))) && !Double.isNaN(entry)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && (!Precision.equals(entry, 0d, maxUlps * Math.ulp(1d)) || Precision.compareTo(entry, 0d, maxUlps) == 0)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (Precision.compareTo(entry, 0d, maxUlps) > 0 && !Precision.equals(entry, 0d, epsilon)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (Precision.compareTo(entry, 0d, maxUlps) >= 0 && !Precision.equals(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry))))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, Math.max(maxUlps * Math.ulp(1d), Precision.EPSILON)) && !Double.isInfinite(entry) && !Double.isNaN(entry)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && Precision.compareTo(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry)))) > 0 && !Double.isInfinite(entry) && !Double.isNaN(entry)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, Math.max(maxUlps * Math.ulp(entry), 10 * epsilon))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && Precision.compareTo(entry, 0d, maxUlps * Math.ulp(Math.max(1d, Math.abs(entry)))) > 0 && !Double.isNaN(entry) && !Double.isInfinite(entry)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (Precision.compareTo(entry, 0d, maxUlps) >= 0 && !Precision.equals(entry, 0d, maxUlps * Math.ulp(1d))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (Precision.compareTo(entry, 0d, maxUlps) > 0 && !Precision.equals(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, entry)))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && Precision.compareTo(entry, 0d, maxUlps * Math.ulp(Math.max(1d, Math.abs(entry)))) != 0) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, Math.max(maxUlps * Math.ulp(1d), Precision.EPSILON))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry >= 0 && !Precision.equals(entry, 0d, maxUlps * Math.ulp(1d))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, entry)))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, Math.max(maxUlps * Math.ulp(entry), 10 * Precision.EPSILON))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, Math.max(maxUlps * Math.ulp(Math.abs(entry)), 10 * Precision.EPSILON))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (Precision.compareTo(entry, 0d, 10 * Precision.EPSILON) > 0) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && Math.abs(entry) > maxUlps * Math.ulp(1.0)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && Precision.compareTo(Math.abs(entry), 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry)))) > 0) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry))))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Double.isNaN(entry) && !Double.isInfinite(entry) && Precision.compareTo(entry, 0d, maxUlps * Math.ulp(Math.max(1d, Math.abs(entry)))) > 0) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry - 0d > maxUlps * Math.ulp(1.0)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, Math.max(maxUlps * Math.ulp(1d), 10 * Precision.EPSILON))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, maxUlps * Math.ulp(Math.max(1d, Math.abs(entry)))) && !Double.isNaN(entry) && !Double.isInfinite(entry)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, Math.max(10 * epsilon, maxUlps * Math.ulp(entry)))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry)))) && !Double.isNaN(entry) && !Double.isInfinite(entry)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && Precision.compareTo(entry, 0d, Math.max(maxUlps * Math.ulp(Math.max(1d, Math.abs(entry))), Precision.SAFE_MIN)) > 0) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && Precision.compareTo(Math.abs(entry), 0d, maxUlps * Math.ulp(1d)) > 0) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && Precision.compareTo(entry, 0d, maxUlps * Math.ulp(Math.max(1d, Math.abs(entry)))) == 1 && !Double.isNaN(entry) && !Double.isInfinite(entry)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, Math.ulp(1.0))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, Math.max(maxUlps * Math.ulp(1d), 10 * epsilon))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0d && !Precision.equals(entry, 0d, maxUlps * Math.ulp(Math.max(1d, Math.abs(entry))))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && Math.abs(entry) > maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry)))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, 10 * epsilon)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, epsilon)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (Precision.compareTo(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry)))) > 0 && !Double.isInfinite(entry) && !Double.isNaN(entry)) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, Math.ulp(1d))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, maxUlps * Math.ulp(1d))) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Double.isInfinite(entry) && !Double.isNaN(entry) && Precision.compareTo(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry)))) > 0) {
,
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+if (entry > 0 && !Precision.equals(entry, 0d, maxUlps * Math.ulp(Math.max(1.0, Math.abs(entry)))) && !Double.isInfinite(entry) && !Double.isNaN(entry)) {
