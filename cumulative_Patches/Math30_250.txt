+ if((VarU >= Umin - EU) == false){
+ return result1325958191=n1;
+ }

,
+ if((VarU > Umin - EU) == false){
+ return result1325958191=n1 * n2;
+ }

,
+ if((VarU > Umin - EU) == false){
+ return result1325958191=n1n2prod;
+ }

,
+ if((VarU >= Umin - EU) == false){
+ return result1325958191=n1n2prod;
+ }

,
+ if((VarU > Umin - EU) == false){
+ return result1325958191=EU;
+ }

,
+ if((VarU >= Umin - EU) == false){
+ return result1325958191=n1 * n2;
+ }

,
+ if((VarU >= Umin - EU) == false){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((VarU > Umin - EU) == false){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((VarU >= Umin - EU) == false){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((VarU > Umin - EU) == false){
+ return result1325958191=n2;
+ }

,
+ if((VarU >= Umin - EU) == false){
+ return result1325958191=n2;
+ }

,
+ if((VarU > Umin - EU) == false){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((VarU > Umin - EU) == false){
+ return result1325958191=Umin;
+ }

,
+ if((VarU >= Umin - EU) == false){
+ return result1325958191=Umin;
+ }

,
+ if((VarU > Umin - EU) == false){
+ return result1325958191=n1;
+ }

,
+ if((VarU >= Umin - EU) == false){
+ return result1325958191=EU;
+ }

,
+ if((n1n2prod >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=EU;
+ }

,
+ if((n1 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n1 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((1 + n1 + n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=Umin;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 1) == false){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((1 + n1 + n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=EU;
+ }

,
+ if((n1n2prod > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=EU;
+ }

,
+ if((n1 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1n2prod > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=Umin;
+ }

,
+ if((n1 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n2;
+ }

,
+ if((n1n2prod > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((1 + n1 + n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 1) == false){
+ return result1325958191=Umin;
+ }

,
+ if((1 + n1 + n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((1 + n1 + n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n2;
+ }

,
+ if((n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=EU;
+ }

,
+ if((n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 1) == false){
+ return result1325958191=n1 * n2;
+ }

,
+ if((1 + n1 + n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=Umin;
+ }

,
+ if((n1 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1;
+ }

,
+ if((n1n2prod >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1n2prod >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=Umin;
+ }

,
+ if((n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n2;
+ }

,
+ if((n1 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 1) == false){
+ return result1325958191=n2;
+ }

,
+ if((n1n2prod >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 1) == false){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1n2prod > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=Umin;
+ }

,
+ if((1 + n1 + n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1n2prod > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=Umin;
+ }

,
+ if((1 + n1 + n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n2;
+ }

,
+ if((n1 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1;
+ }

,
+ if((n1n2prod >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1;
+ }

,
+ if((1 + n1 + n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 1) == false){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((1 + n1 + n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=EU;
+ }

,
+ if((1 + n1 + n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 1) == false){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((1 + n1 + n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1n2prod > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=EU;
+ }

,
+ if((n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=EU;
+ }

,
+ if((n1n2prod > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1;
+ }

,
+ if((n1 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=Umin;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 1) == false){
+ return result1325958191=n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 1) == false){
+ return result1325958191=n1;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 1) == false){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1n2prod >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((1 + n1 + n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1;
+ }

,
+ if((1 + n1 + n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n2;
+ }

,
+ if((n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=EU;
+ }

,
+ if((n1n2prod > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n2;
+ }

,
+ if((n1 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 1) == false){
+ return result1325958191=EU;
+ }

,
+ if((n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=Umin;
+ }

,
+ if((1 + n1 + n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 1) == false){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 1) == false){
+ return result1325958191=Umin;
+ }

,
+ if((1 + n1 + n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1n2prod >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 1) == false){
+ return result1325958191=n1;
+ }

,
+ if((n1 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1n2prod >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 1) == false){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 1) == false){
+ return result1325958191=EU;
+ }

,
+ if((n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 2) == false){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 2) == false){
+ return result1325958191=EU;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 0) == false){
+ return result1325958191=EU;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 0) == false){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 2) == false){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1 * n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=EU;
+ }

,
+ if((n1 * n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 0) == false){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 2) == false){
+ return result1325958191=n2;
+ }

,
+ if((n1 * n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 0) == false){
+ return result1325958191=n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 0) == false){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1 * n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 2) == false){
+ return result1325958191=n2;
+ }

,
+ if((n1 * n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 0) == false){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1 * n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 2) == false){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1 * n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 2) == false){
+ return result1325958191=Umin;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 2) == false){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1 * n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=Umin;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 2) == false){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1 * n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 0) == false){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1 * n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 0) == false){
+ return result1325958191=EU;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 0) == false){
+ return result1325958191=n2;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 2) == false){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 0) == false){
+ return result1325958191=n1;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 0) == false){
+ return result1325958191=Umin;
+ }

,
+ if((n1 * n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=Umin;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 2) == false){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 2) == false){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 0) == false){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 0) == false){
+ return result1325958191=Umin;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 0) == false){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 0) == false){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n1 * n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1;
+ }

,
+ if((n1 * n2 >= n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1 * n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=EU;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 0) == false){
+ return result1325958191=n1;
+ }

,
+ if((n1 * n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 2) == false){
+ return result1325958191=n1;
+ }

,
+ if((n1 * n2 > n1n2prod * (1 + n1 + n2)) == true){
+ return result1325958191=n1;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) > 2) == false){
+ return result1325958191=Umin;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 2) == false){
+ return result1325958191=n1;
+ }

,
+ if((n1n2prod * (1 + n1 + n2) >= 2) == false){
+ return result1325958191=EU;
+ }

,
+ if((n1 == n2) == true){
+ return result1325958191=n2;
+ }

,
+ if((n1 > n2) == false){
+ return result1325958191=Umin;
+ }

,
+ if((n1 == n2) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1 > n2) == false){
+ return result1325958191=n1;
+ }

,
+ if((n1 == n2) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1 > n2) == false){
+ return result1325958191=n2;
+ }

,
+ if((n1 > n2) == false){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((n1 == n2) == true){
+ return result1325958191=Umin;
+ }

,
+ if((n1 > n2) == false){
+ return result1325958191=n1 * n2;
+ }

,
+ if((n1 == n2) == true){
+ return result1325958191=n1;
+ }

,
+ if((EU > VarU) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((EU > VarU) == true){
+ return result1325958191=n1;
+ }

,
+ if((Umin > VarU) == true){
+ return result1325958191=n2;
+ }

,
+ if((Umin >= VarU) == true){
+ return result1325958191=n1;
+ }

,
+ if((Umin > VarU) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((Umin >= VarU) == true){
+ return result1325958191=EU;
+ }

,
+ if((EU >= VarU) == true){
+ return result1325958191=n2;
+ }

,
+ if((EU >= VarU) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((Umin > VarU) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((EU > VarU) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((Umin >= VarU) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((EU > VarU) == true){
+ return result1325958191=EU;
+ }

,
+ if((EU >= VarU) == true){
+ return result1325958191=n1;
+ }

,
+ if((Umin > VarU) == true){
+ return result1325958191=n1;
+ }

,
+ if((EU > VarU) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((Umin >= VarU) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((EU > VarU) == true){
+ return result1325958191=Umin;
+ }

,
+ if((Umin > VarU) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((EU >= VarU) == true){
+ return result1325958191=n1 * n2;
+ }

,
+ if((EU >= VarU) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((EU > VarU) == true){
+ return result1325958191=n2;
+ }

,
+ if((Umin > VarU) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((Umin >= VarU) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((Umin >= VarU) == true){
+ return result1325958191=Umin;
+ }

,
+ if((Umin > VarU) == true){
+ return result1325958191=EU;
+ }

,
+ if((EU > VarU) == true){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((Umin >= VarU) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((Umin > VarU) == true){
+ return result1325958191=Umin;
+ }

,
+ if((Umin >= VarU) == true){
+ return result1325958191=n2;
+ }

,
+ if((EU >= VarU) == true){
+ return result1325958191=EU;
+ }

,
+ if((EU >= VarU) == true){
+ return result1325958191=Umin;
+ }

,
+ if((EU >= VarU) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1 == n2) == true){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n1 > n2) == false){
+ return result1325958191=n1n2prod;
+ }

,
+ if((n1 == n2) == true){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1 > n2) == false){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((n1 > n2) == false){
+ return result1325958191=EU;
+ }

,
+ if((n1 == n2) == true){
+ return result1325958191=EU;
+ }

,
+ if((z >= Umin - EU) == false){
+ return result1325958191=n1 * n2;
+ }

,
+ if((z > Umin - EU) == false){
+ return result1325958191=n1n2prod;
+ }

,
+ if((z >= Umin - EU) == false){
+ return result1325958191=EU;
+ }

,
+ if((z >= Umin - EU) == false){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((z >= Umin - EU) == false){
+ return result1325958191=n1;
+ }

,
+ if((z > Umin - EU) == false){
+ return result1325958191=n2;
+ }

,
+ if((z > Umin - EU) == false){
+ return result1325958191=n1 * n2;
+ }

,
+ if((z >= Umin - EU) == false){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
+ if((z >= Umin - EU) == false){
+ return result1325958191=Umin;
+ }

,
+ if((z > Umin - EU) == false){
+ return result1325958191=EU;
+ }

,
+ if((z > Umin - EU) == false){
+ return result1325958191=1 + n1 + n2;
+ }

,
+ if((z > Umin - EU) == false){
+ return result1325958191=Umin;
+ }

,
+ if((z >= Umin - EU) == false){
+ return result1325958191=n2;
+ }

,
+ if((z > Umin - EU) == false){
+ return result1325958191=n1;
+ }

,
+ if((z >= Umin - EU) == false){
+ return result1325958191=n1n2prod;
+ }

,
+ if((z > Umin - EU) == false){
+ return result1325958191=n1n2prod / 2.0;
+ }

,
-        if (FastMath.abs(dev) > 40 * standardDeviation) {
+        if ((java.lang.Double.isNaN(SQRT2PI)) || (java.lang.Double.isNaN(x))) {
,
-        if (FastMath.abs(dev) > 40 * standardDeviation) {
+        if (x != x) {
,
-        if (FastMath.abs(dev) > 40 * standardDeviation) {
+        if ((java.lang.Double.isNaN(mean)) || (java.lang.Double.isNaN(dev))) {
,
-        if (FastMath.abs(dev) > 40 * standardDeviation) {
+        if ((java.lang.Double.isNaN(SQRT2PI)) || (java.lang.Double.isNaN(dev))) {
,
-        if (FastMath.abs(dev) > 40 * standardDeviation) {
+        if (java.lang.Double.isNaN(dev)) {
,
-        final int n1n2prod = n1 * n2;
+        final long n1n2prod = Math.multiplyExact(n1, n2);
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = ((long)n1) * ((long)n2);
,
-        final int n1n2prod = n1 * n2;
+final long n1Long = (long)n1;
+final long n2Long = (long)n2;
+final long n1n2prod = n1Long * n2Long;
,
-        final int n1n2prod = n1 * n2;
+        final double n1n2prod = (double) n1 * (double) n2;
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = (long)n1 * n2;
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = Math.multiplyExact(n1, (long)n2);
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = Math.multiplyExact((long)n1, n2);
,
-        final int n1n2prod = n1 * n2;
+        final long n1n2prod = (long)n1 * (long)n2;
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = ((long) n1) * n2;
,
-        final int n1n2prod = n1 * n2;
+        final long n1n2prod = (long) Math.multiplyExact(n1, n2);
,
-        final int n1n2prod = n1 * n2;
+final double n1n2prod = Math.multiplyExact(n1, n2);
,
-        final int n1n2prod = n1 * n2;
+        long n1n2prod = (long) n1 * (long) n2;
,
-        final int n1n2prod = n1 * n2;
+        final long n1n2prod = (long) n1 * (long) n2;
,
-        final int n1n2prod = n1 * n2;
+final long n1Long = (long)n1;
+final long n2Long = (long)n2;
+final long n1n2prod = Math.multiplyExact(n1Long, n2Long);
,
-        final int n1n2prod = n1 * n2;
+final long n1Long = (long) n1;
+final long n2Long = (long) n2;
+final long n1n2prod = n1Long * n2Long;
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = (long) Math.multiplyExact(n1, (long) n2);
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = Math.multiplyExact((long) n1, (long) n2);
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = (long) Math.multiplyExact(n1, (long)n2);
,
-        final int n1n2prod = n1 * n2;
+        final long n1n2prod = (long)n1 * n2;
,
-        final int n1n2prod = n1 * n2;
+        final double n1n2prod = (double) n1 * n2;
,
-        final int n1n2prod = n1 * n2;
+        final long n1n2prod = ((long) n1) * ((long) n2);
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = (long)n1 * (long)n2;
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = (long) n1 * (long) n2; // fix for potential integer overflow
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = Math.multiplyExact((long)n1, (long)n2);
,
-        final int n1n2prod = n1 * n2;
+final long n1Long = (long) n1;
+final long n2Long = (long) n2;
+final long n1n2prod = Math.multiplyExact(n1Long, n2Long);
,
-        final int n1n2prod = n1 * n2;
+final long n1Long = n1;
+final long n2Long = n2;
+final long n1n2prod = n1Long * n2Long;
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = (long) n1 * (long) n2;
,
-        final int n1n2prod = n1 * n2;
+        final long n1n2prod = (long) n1 * n2;
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = Math.multiplyExact(n1, (long) n2);
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = (long) Math.multiplyExact(n1, n2);
,
-        final int n1n2prod = n1 * n2;
+        final double n1n2prod = (double) (n1 * n2);
,
-        final int n1n2prod = n1 * n2;
+        final double n1n2prod = n1 * (double) n2;
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = Math.multiplyExact(n1, n2);
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = ((long) n1) * ((long) n2);
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = (long) n1 * n2;
,
-        final int n1n2prod = n1 * n2;
+final double n1n2prod = n1 * (double) n2;
,
-        final int n1n2prod = n1 * n2;
+final long n1n2prod = ((long)n1) * n2;
