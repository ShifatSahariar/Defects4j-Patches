-            int j = 4 * n - 1;
+int j = 4 * (n - 1) + pingPong; 
,
-            int j = 4 * n - 1;
+            int j = 4 * (n - 1) + pingPong;
,
-            int j = 4 * n - 1;
+int j = 4 * (n - 1 - pingPong / 2);
,
-            int j = 4 * n - 1;
+int j = 4 * n - 4 - pingPong;
,
-            int j = 4 * n - 1;
+int j = 4 * (n - 1 - pingPong % 2);
,
-            int j = 4 * n - 1;
+int j = pingPong == 0 ? 4 * (n - 1) : 4 * n - 1;
,
-            int j = 4 * n - 1;
+            int j = 4 * (n - 1);
,
-            int j = 4 * n - 1;
+int j = 4 * (n - 1) + (pingPong != 0 ? 4 - pingPong : 0);
,
-            int j = 4 * n - 1;
+int j = 4 * (n - 1) + (((pingPong % 2) == 0) ? pingPong : (4 - pingPong));
,
-            int j = 4 * n - 1;
+int j = (4 * (n - 1) + pingPong) % work.length;
,
-            int j = 4 * n - 1;
+int j = (4 * (n - 1)) + pingPong;
,
-            int j = 4 * n - 1;
+            int j = 4 * n + pingPong - 4;
,
-            int j = 4 * n - 1;
+int j = 4 * (n - 1);
,
-            int j = 4 * n - 1;
+int j = 4 * (n - 1 - pingPong / 2) + pingPong % 2;
,
-            int j = 4 * n - 1;
+int j = 4 * (n - 1) + (pingPong == 0 ? 0 : 4 - pingPong);
,
-            int j = 4 * n - 1;
+            int j = 4 * n - 4 + pingPong;
,
-            int j = 4 * n - 1;
+int j = 4 * n - 4 + pingPong;
,
-            int j = 4 * n - 1;
+            int j = 4 * n - 4 - pingPong;
,
-            int j = 4 * n - 1;
+int j = 4 * (n - 1) + (4 - pingPong) % 4;
,
-            int j = 4 * n - 1;
+int j = pingPong + 4 * (n - 1);
,
-            int j = 4 * n - 1;
+ int j = 4 * (n - 1) + pingPong;
,
-            int j = 4 * n - 1;
+int j = 4 * n - pingPong - 4;
,
-            int j = 4 * n - 1;
+            int j = 4 * (n - 1) + pingPong; 
,
-            int j = 4 * n - 1;
+int j = 4 * (n - 1 - pingPong % 2) + pingPong;
,
-            int j = 4 * n - 1;
+int j = 4 * n - 4 - (pingPong % 2);
,
-            int j = 4 * n - 1;
+int j = 4 * (n - 1) + (pingPong == 0 ? 0 : 4);
,
-            int j = 4 * n - 1;
+int j = (pingPong == 0) ? 4 * (n - 1) : 4 * n - 1 - pingPong;
,
-            int j = 4 * n - 1;
+int j = 4 * (n - 1) + pingPong;
,
-            for (int i = 0; i < j; i += 4) {
+            for (int i = 0; (((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(n + 2)])) < (work[(n - 3)])) && (((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(n - 3)])) < (work[(n + 2)])); i += 4) {
,
-                for (int k = 0; k < 4; k += step) {
+                for (int k = 0; j == ((pingPong) - 2); k += step) {
,
-            for (int i = 0; i < j; i += 4) {
+            for (int i = 0; (dN) != 0.0; i += 4) {
,
-                for (int k = 0; k < 4; k += step) {
+                for (int k = 0; ((((dMin) < 0.0) && ((dMin1) > 0.0)) && ((work[(((4 * j) - 5) - (pingPong))]) < ((org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE) * ((sigma) + (dN1))))) && ((java.lang.Math.abs(dN)) < ((org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE) * (sigma))); k += step) {
,
-                for (int k = 0; k < 4; k += step) {
+                for (int k = 0; (tType) > 0; k += step) {